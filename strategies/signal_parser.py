import re
from typing import Dict, Any, Optional, Tuple
from loguru import logger
from core.api_client import BybitClient

class SignalParser:
    def __init__(self, api_client: BybitClient):
        self.api_client = api_client
        
    def parse_signal(self, message: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞: {message}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            pair_match = re.search(r'([A-Z]+/[A-Z]+)\s*[üìàüìâ]\s*(BUY|SELL)', message)
            if not pair_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                return None
                
            symbol = pair_match.group(1).replace('/', '')
            side = pair_match.group(2)
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–æ–Ω—É –≤—Ö–æ–¥–∞
            entry_match = re.search(r'Entry zone:\s*(\d+\.?\d*)-(\d+\.?\d*)', message)
            if not entry_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–æ–Ω—É –≤—Ö–æ–¥–∞")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–æ–Ω—ã –≤—Ö–æ–¥–∞: {message}")
                return None
                
            entry_high = float(entry_match.group(1))
            entry_low = float(entry_match.group(2))
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –∑–æ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_low}-{entry_high}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
            tp_matches = re.findall(r'TP\d+\s*(\d+\.?\d*)', message)
            logger.debug(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {tp_matches}")
            
            if len(tp_matches) != 3:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã. –ù–∞–π–¥–µ–Ω–æ: {len(tp_matches)}")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤: {message}")
                return None
                
            tp1, tp2, tp3 = map(float, tp_matches)
            logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: TP1={tp1}, TP2={tp2}, TP3={tp3}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            sl_match = re.search(r'SL\s*(\d+\.?\d*)', message)
            if not sl_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {message}")
                return None
                
            sl = float(sl_match.group(1))
            logger.debug(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å: {sl}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–µ—á–æ
            leverage_match = re.search(r'Leverage\s*(\d+)x', message)
            if not leverage_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ—á–æ")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ—á–∞: {message}")
                return None
                
            leverage = int(leverage_match.group(1))
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–ª–µ—á–æ: {leverage}x")
            
            return {
                'symbol': symbol,
                'side': side,
                'entry_high': entry_high,
                'entry_low': entry_low,
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'sl': sl,
                'leverage': leverage
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
            
    def check_entry_conditions(self, signal: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            klines = self.api_client.get_klines(
                symbol=signal['symbol'],
                interval="1",
                limit=1
            )
            current_price = float(klines['result']['list'][0][4])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ –≤ –∑–æ–Ω–µ –≤—Ö–æ–¥–∞
            if signal['entry_low'] <= current_price <= signal['entry_high']:
                return True
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            if signal['side'] == 'SELL':
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ TP1 –Ω–∞ 0.2%
                min_price = signal['tp1'] * 1.002
                return current_price >= min_price
            else:
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ TP1 –Ω–∞ 0.2%
                max_price = signal['tp1'] * 0.998
                return current_price <= max_price
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞: {e}")
            return False
            
    def execute_signal(self, signal: Dict[str, Any]) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal['symbol']
            side = signal['side']
            entry_price = (signal['entry_high'] + signal['entry_low']) / 2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–æ–Ω—ã –≤—Ö–æ–¥–∞
            sl_price = signal['sl']
            tp_prices = [signal['tp1'], signal['tp2'], signal['tp3']]
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_data = self.api_client.get_balance()
            available_balance = float(balance_data['result']['list'][0]['totalAvailableBalance'])
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available_balance} USDT")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            position_size = available_balance * 0.01
            logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size} USDT")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            position_contracts = self.api_client._convert_usdt_to_contracts(symbol, position_size)
            logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö: {position_contracts}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä (—Ä—ã–Ω–æ—á–Ω—ã–π) —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º
            logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {symbol}")
            logger.info(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: TP1={tp_prices[0]} (30%), TP2={tp_prices[1]} (30%), TP3={tp_prices[2]} (100%)")
            logger.info(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {sl_price} (100%)")
            
            self.api_client.place_order(
                symbol=symbol,
                side=side,
                qty=position_size,
                take_profit=False,  # –£–±–∏—Ä–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                stop_loss=True,
                sl_trigger_price=sl_price,
                sl_quantity_percentage=100  # 100% –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            self.api_client.place_take_profit(
                symbol=symbol,
                tp_trigger_price=tp_prices[0],
                tp_quantity_percentage=30,  # 30% –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                total_position_size=position_contracts
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            self.api_client.place_take_profit(
                symbol=symbol,
                tp_trigger_price=tp_prices[1],
                tp_quantity_percentage=30,  # 30% –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                total_position_size=position_contracts
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
            self.api_client.place_take_profit(
                symbol=symbol,
                tp_trigger_price=tp_prices[2],
                tp_quantity_percentage=100,  # 100% –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                total_position_size=position_contracts
            )
            
            logger.info("–°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            raise 