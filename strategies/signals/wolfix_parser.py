import re
from typing import Dict, Any, Optional
from loguru import logger
from core.api_client import BybitClient
from .base_parser import BaseSignalParser

class WolfixParser(BaseSignalParser):
    def __init__(self, api_client: BybitClient):
        super().__init__(api_client)
        
    def get_parser_name(self) -> str:
        return "Wolfix"
        
    def parse_signal(self, message: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Wolfix"""
        try:
            logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ Wolfix: {message}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            pair_match = re.search(r'([A-Z]+/[A-Z]+)\s*[üìàüìâ]\s*(BUY|SELL)', message)
            if not pair_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                return None
                
            symbol = pair_match.group(1).replace('/', '')
            side = pair_match.group(2)
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–æ–Ω—É –≤—Ö–æ–¥–∞
            entry_match = re.search(r'Entry zone:\s*(\d+\.?\d*)-(\d+\.?\d*)', message)
            if not entry_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–æ–Ω—É –≤—Ö–æ–¥–∞")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–æ–Ω—ã –≤—Ö–æ–¥–∞: {message}")
                return None
                
            entry_high = float(entry_match.group(1))
            entry_low = float(entry_match.group(2))
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –∑–æ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_low}-{entry_high}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
            tp_matches = re.findall(r'TP\d+\s*(\d+\.?\d*)', message)
            logger.debug(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {tp_matches}")
            
            if len(tp_matches) != 3:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã. –ù–∞–π–¥–µ–Ω–æ: {len(tp_matches)}")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤: {message}")
                return None
                
            tp1, tp2, tp3 = map(float, tp_matches)
            logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: TP1={tp1}, TP2={tp2}, TP3={tp3}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            sl_match = re.search(r'SL\s*(\d+\.?\d*)', message)
            if not sl_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {message}")
                return None
                
            sl = float(sl_match.group(1))
            logger.debug(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å: {sl}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–µ—á–æ
            leverage_match = re.search(r'Leverage\s*(\d+)x', message)
            if not leverage_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ—á–æ")
                logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ—á–∞: {message}")
                return None
                
            leverage = int(leverage_match.group(1))
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–ª–µ—á–æ: {leverage}x")
            
            return {
                'symbol': symbol,
                'side': side,
                'entry_high': entry_high,
                'entry_low': entry_low,
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'sl': sl,
                'leverage': leverage,
                'parser': self.get_parser_name()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∏–≥–Ω–∞–ª–∞ Wolfix: {e}")
            return None 